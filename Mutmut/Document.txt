Mutmut

Mutmut is a mutation testing system for Python, with a strong focus on ease of use. But first, What is mutation testing?

Mutation testing is a technique to help identify holes in test suites. It focus not on the quality of code, but on the quality of unit tests. It does this by making small changes in your codebase and running your test suite against it. The assumption is that if your tests don’t fail, then your tests aren’t specific enough and are missing some cases.


Some highlight features of Mutmut are:

Found mutants can be applied on disk with a simple command making it very easy to work with the results

Remembers work that has been done, so you can work incrementally

Supports all test runners (because mutmut only needs an exit code from the test command)

If you use the hammett test runner you can go extremely fast! There’s special handling for this runner that has some pretty dramatic results.

Can use coverage data to only do mutation testing on covered lines

Battle tested on real libraries by multiple companies

If you need to run mutmut on a python 2 code base use mutmut 1.5.0. Mutmut 1.9.0 is the last version to support python 3.4, 3.5 and 3.6.


Install and run

You can get started with a simple:

pip install mutmut

mutmut run

This will by default run pytest (or unittest if pytest is unavailable) on tests in the “tests” or “test” folder and it will try to figure out where the code to mutate lies.


Example mutations

Integer literals are changed by adding 1. So 0 becomes 1, 5 becomes 6, etc.

< is changed to <=

break is changed to continue and vice versa

In general the idea is that the mutations should be as subtle as possible. See __init__.py for the full list.

However, the default configuration is likely to not fit your needs. One thing to note is that you may need to specify both the code directory and the test directory like so

mutmut run --paths-to-mutate "app/" --tests-dir "tests/"

# Example

PS C:\Work\Shoaib\Tasks\Mutmut> mutmut run --paths-to-mutate "src_code/" --tests-dir "tests/"

- Mutation testing starting -

These are the steps:
1. A full test suite run will be made to make sure we
   can run the tests successfully and we know how long
   it takes (to detect infinite loops for example)
2. Mutants will be generated and checked

Results are stored in .mutmut-cache.
Print found mutants with `mutmut results`.

Legend for output:
🎉 Killed mutants.   The goal is for everything to end up in this bucket.
⏰ Timeout.          Test suite took 10 times as long as the baseline so were killed.
🤔 Suspicious.       Tests took a long time, but not long enough to be fatal.
🙁 Survived.         This means your tests need to be expanded.
🔇 Skipped.          Skipped.

1. Running tests without mutations
⠇ Running...Done

2. Checking mutants
⠦ 82/82  🎉 23  ⏰ 0  🤔 11  🙁 48  🔇 0


To view the full report, type the following in a terminal

mutmut results

This will show you a value like

To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Suspicious 🤔 (12)

---- src_code/main.py (12) ----

23-26, 31-32, 35-39, 43

Survived 🙁 (48)

---- src_code/main.py (48) ----

2, 5-6, 8, 14, 16, 18-19, 30, 40-42, 45, 48-82


It tells you which mutants (2, 5, and 6) survived and the file that had code changed.

To view the individual mutant, you can type in "mutmut show <id>" to show you the diff between the original code and the mutation

PS C:\Work\Shoaib\Tasks\Mutmut> mutmut show 2
--- src_code/main.py
+++ src_code/main.py
@@ -1,7 +1,7 @@
 from datetime import datetime, timedelta, time

 def convert_in_seconds(t):
-    t_in_seconds = t.hour * 3600 + t.minute * 60 + t.second
+    t_in_seconds = t.hour * 3601 + t.minute * 60 + t.second
     return t_in_seconds

